swagger: '2.0'
info:
  title: Rocketpin API
  version: "1.0.0"
  description: >-
    RocketPin es una aplicación que combina el poder del crowdsourcing con
    tecnología móvil para entregar información en línea de tu negocio.


    ## Especificaciones del API


    Todo el acceso a la API,  se realiza a través de HTTP (proximaente HTTPS), y
    se accede a el desde el host https://rocketpin.com/api. Todos los datos se
    envían y se reciben como JSON.


    Todas las llamadas a la API requieren la convinación de un token de acceso
    (X-AdminUser-Token) más el email (X-AdminUser-Email) del usuario. De lo
    contrario se puede acceder mediante cookies propias de Devise
    (https://github.com/plataformatec/devise).


    ## Solicitudes HTTP permitidas:


    - POST   :   Para crear un recurso


    - GET    :   Obtener un recurso o una lista de recursos


    - DELETE :   Para eliminar un recurso


    - PUT    :   Para actualizar un recurso


    - PATCH  :   Para actualizar un recurso especifico


    ## Respuestas habituales del servidor


    - 200 `OK` - La solicitud fue satisfactoria.


    - 201 `Created` - La solicitud tuvo éxito y se creó un recurso.


    - 204 `No Content` - La solicitud tuvo éxito pero no hay ninguna
    representación para devolver (es decir, la respuesta está vacía).


    - 401 `Unauthorized` - Falló la autenticación o el usuario no tiene permisos
    para la operación solicitada.


    - 403 `Forbidden` - Acceso denegado.


    - 404 `Not Found` - Recurso no encontrado.


    - 405 `Method Not Allowed` - Método solicitado no es compatible con el
    recurso.


    - 422 `Unprocessable Entity` - La solicitud no pudo ser entendida o faltaba
    los parámetros requeridos.


    ## Paginación


    Para el manejo de paginación es importante conocer la información
    proporcionada por las cabeceras de algunos recursos que devuelven demasiada
    información


    - X-Page: `int` La pagina correspondiente a la respuesta


    - X-Page-Total: `int` El total de paginas disponibles


    ## Fechas


    Todas las fechas deben estar en formato `ISO 8601` (ejemplo:
    2018-04-15T15:52:01.000Z)


    ## Errors


    Todos los errores, a menos que sean especificados, deben tener este
    formato, 

    donde el **mensaje** es una descripción general del error 

    y los errores son un objeto con errores específicos en la solicitud. 

    Ademas la respuesta devuelve un código http `422`


    ```json

    {
      "message": "this is a description",
      "errors": {
        "no_doc": "no doc property",
        "foo": "foo",
        "bar": "bar"
      }
    }

    ```
host: qa.rocketpin.com
basePath: /
schemes:
  - http
paths:
  /api/sessions:
    post:
      produces:
        - application/json      
      responses:
        200:
          description: 
            Objeto de sesión conteniendo el token de autenticación. A continuación se indican los campos de mayor utilidad devueltos por el proceso.
          schema:
            type: object
            properties:
              id:
                type: integer
                description: el ID de la sesión recién creada
                example: 283766              
              email:
                type: string
                description: email del usuario del API autenticado
                example: "apiqa@rocketpin.com"              
              authentication_token:
                type: string
                example: "zsKh-9yKzHin9zpk4zwv"              
                description: token de autenticación generado para ser usado en las siguiente peticiones al API
      description: 
        Crea una nueva sesión en la que se obtiene un nuevo token de autenticación para ser usado en futuras peticiones al API.
      tags:
        - Sessions Resource
      parameters:
        - name: body
          in: body
          description: >-
            Objeto para efectuar la autenticación          
          schema:
            type: object
            required:
              - 'email'
              - 'password'
            properties:
              'email':
                type: string
                description: Email del usuario de autenticación al API
              'password':
                type: string
                description: Contraseña del usuario de autenticación al API
            example:
              email: apiqa@rocketpin.com
              password: apiqa2020!
    delete:
      responses:
        '204':
          description: No Content
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Elimina la session actual
      tags:
        - Sessions Resource
      parameters:
        - in: header
          name: X-AdminUser-Token
          description: Token obtenido desde la última autenticación efectuada 
          required: true
          x-example: zsKh-9yKzHin9zpk4zwv
          type: string          
  /api/me:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Muesta datos del usuario actual
      tags:
        - Sessions Resource
      parameters:
        - name: X-AdminUser-Email
          in: header
          description: usuario de autenticación del API Rocketpin
          required: true
          x-example: apiqa@rocketpin.com
          type: string
        - name: X-AdminUser-Token
          in: header
          description: Token obtenido desde la última autenticación efectuada 
          required: true
          x-example: zsKh-9yKzHin9zpk4zwv
          type: string
        - name: Accept
          in: header
          description: e.g. application/vnd.rocketpin+json; version=2
          required: true
          x-example: application/vnd.rocketpin+json; version=2
          type: string          
  /api/communes:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: >-
        Ver listado de comunas (campains)


        Este servicio devolverá un arreglo de objetos en donde cada objeto
        representa 

        una comuna conteniendo el atributo *id* que identifica a la misma.
      tags:
        - Headquarter Resource
      parameters:
        - in: query
          name: country_id
          schema:
            type: integer
            minimum: 1
            maximum: 5
            default: 1            
          description: "Identificador de País. Los valores se corresponden a: 1 - Chile, 2 - Argentina, 4 - Uruguay, 5 - México"
        - name: X-AdminUser-Token
          in: header
          description: e.g. xxxxxxxxxxxxxxxxxxxx
          required: false
          x-example: xxxxxxxxxxxxxxxxxxxx
          type: string
        - name: X-AdminUser-Email
          in: header
          description: e.g. apiqa@rocketpin.com
          required: false
          x-example: apiqa@rocketpin.com
          type: string
        - name: Accept
          in: header
          description: e.g. application/vnd.rocketpin+json; version=2
          required: false
          x-example: application/vnd.rocketpin+json; version=2
          type: string
  /api/headquarters:
    post:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: >-
        Crear nueva sucursal


        Para la creación de una nueva sucursal se debe construir un json con la
        estructura indicada.

        Recordemos que primero debemos tener el *id* de la comuna obtenido
        mediante el servicio anterior.

        Dicho valor será utilizado en el atributo commune_id para la creación de
        la sucursal.

        Una vez que se consuma el servicio y se crea satisfactoriamente la
        sucurusal se obtenbdrá 

        el json de respuesta del cual debemos tomar el valor del atributo *id*
        que identifica la sucursal

        en vista de que este será utilizado en el campo *headquarter_id* al
        momento de construir la misión
      tags:
        - Headquarter Resource
      parameters:
        - name: X-AdminUser-Token
          in: header
          description: e.g. xxxxxxxxxxxxxxxxxxxx
          required: false
          x-example: xxxxxxxxxxxxxxxxxxxx
          type: string
        - name: X-AdminUser-Email
          in: header
          description: e.g. apiqa@rocketpin.com
          required: false
          x-example: apiqa@rocketpin.com
          type: string
        - name: Accept
          in: header
          description: e.g. application/vnd.rocketpin+json; version=2
          required: false
          x-example: application/vnd.rocketpin+json; version=2
          type: string
        - name: body
          in: body
          schema:
            type: object
            properties:
              headquarter:
                type: object
                properties:
                  code:
                    type: string
                    description: 'Nombre interno del cliente,'
                  name:
                    type: string
                    description: 'Nombre de la sucursal,'
                  phone_1:
                    type: string
                    description: Numero telefónico
                  description:
                    type: string
                    description: Texto de descripción adicional
                  address:
                    type: object
                    properties:
                      street:
                        type: string
                        description: Nombre de la calle
                      full_address:
                        type: string
                        description: Nombre de la calle
                      lat:
                        type: number
                        description: Latitud de dirección
                      long:
                        type: number
                        description: Longitud de dirección
                      commune_id:
                        type: string
                        description: >-
                          ID de comuna. Este se obtiene consultando el servicio
                          [GET] /api/communes
                    required:
                      - street
                      - lat
                      - long
                required:
                  - name
            example:
              headquarter:
                code: CON132F
                name: '[CON9] Sede Calbacura'
                phone_1: '384738263'
                description: Sucursal objetivo con objetivo principal
                address:
                  street: 'Calbucura 6991, Huechuraba, Chile'
                  full_address: >-
                    Calbucura 6991, Huechuraba, Chile. Diagonal a la plaza
                    central, en edificio de rejas negras
                  lat: 33.359
                  long: 70.66611
                  commune_id: '13107'
  '/api/campains/{campainId}/missions':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Obtener misiones de una campaña
      tags:
        - Campain Resources
      parameters: []
    post:
      responses: {}
      summary: ''
      operationId: ''
      description: Creación de Verificación de domicilio
      tags:
        - Tipos de misiones
      parameters:
        - name: campainId
          in: path
          description: Identificador de la campaña
          required: true
          type: number
        - name: X-AdminUser-Token
          in: header
          description: e.g. xxxxxxxxxxxxxxxxxxxx
          required: false
          x-example: xxxxxxxxxxxxxxxxxxxx
          type: string
        - name: X-AdminUser-Email
          in: header
          description: e.g. apiqa@rocketpin.com
          required: false
          x-example: apiqa@rocketpin.com
          type: string
        - name: Accept
          in: header
          description: e.g. application/vnd.rocketpin+json; version=2
          required: false
          x-example: application/vnd.rocketpin+json; version=2
          type: string
        - name: body
          in: body
          schema:
            type: object
            properties:
              mission:
                type: object
                properties:
                  headquarter_id:
                    type: number
                    description: >-
                      Id de sucursal obtenido previamente mediante [POST] /api/headquarters
                  address_id:
                    type: number
                    description: Se asinga el mismo valor que el atributo anterior
                  extension:
                    type: object
                    properties:
                      rut:
                        type: string
                        description: Rut del solicitante
                      cellphone:
                        type: string
                        description: Celular del solicitante
                      first_name:
                        type: string
                        description: Nombre del solicitante
                      last_name:
                        type: string
                        description: Apellido paterno del solicitante
                      second_last_name:
                        type: string
                        description: Apellido materno del solicitante
                      name:
                        type: string
                        description: Nombre completo del solicitante
                      email:
                        type: string
                        description: Email de la persona a verificar
                    required:
                      - rut
                      - cellphone
                      - first_name
                      - last_name
                      - second_last_name
                      - name
                      - email
                required:
                  - headquarter_id
                  - address_id
            example:
              mission:
                headquarter_id: 1041509
                address_id: 1041509
                schedule: 1553065200
                extension:
                  rut: 18777671-6
                  cellphone: '956475839'
                  first_name: Gabriel
                  last_name: Rico
                  second_last_name: Castro
                  name: Gabriel Rico Castro
                  email: gabrielrico@gmail.com
  '/api/missions/{missionId}':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Muestra detalles de una misión
      tags:
        - Mission Resource
      parameters:
        - name: missionId
          in: path
          required: true
          type: string
          description: "Identificador de la misión"
          x-example: 5ef26d73fffbe91d83f9ae3e
        - name: X-AdminUser-Email
          in: header
          description: usuario de autenticación del API Rocketpin
          required: true
          x-example: apiqa@rocketpin.com
          type: string
        - name: X-AdminUser-Token
          in: header
          description: Token obtenido desde la última autenticación efectuada 
          required: true
          x-example: zsKh-9yKzHin9zpk4zwv
          type: string
        - name: Accept
          in: header
          description: e.g. application/vnd.rocketpin+json; version=2
          required: true
          x-example: application/vnd.rocketpin+json; version=2
          type: string 
  /api/campains:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: |-
        Ver listado de campañas (campains)

        <!-- ####Parameters
         - *search*: (string) Buscar en los campos mas relevantes por un match
         - *type*: (string) Buscar solo clients de ese tipo
         - *page*: (int) Numero de pagina (default: 1)
         - *pageSize*: (int) Tamaño de pagina (default: 20)

        ####Headers
         - *X-Page*: (int) La pagina correspondiente a la respuesta
         - *X-Page-Total*: (int) El total de paginas disponibles -->
      tags:
        - Campain Resources
      parameters: []
  '/api/campains/{campainId}':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Ver detalles de una campaña
      tags:
        - Campain Resources
      parameters: []
  '/api/missions/{missionId}/responses':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Muestra el listado de respuestas
      tags:
        - Responses Resources
      parameters: []
  '/api/builders/{builderId}':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
      summary: ''
      operationId: ''
      description: Muestra el detalle de un formulario
      tags:
        - Builder Resources
      parameters: []
definitions: {}
securityDefinitions: {}
tags:
  - name: Sessions Resource
    description: >-
      La siguiente seccion esta relacionada con las sessiones de usuario. Este
      endpoint no cuenta con un modelo propio. La mayoría de las respuestas
      hacen referencia al modelo de usuario.

      Es indispensable tener una sesión valida para realizar cualquier consulta
      en al API. Si solo se tiene un usuario y password es necesario solicitar
      el token a través de este recurso.

      ###User Model
      - id (string) : Id session
      - user (object): Usuario
  - name: Creación de una misión
    description: >-
      Para automatizar el proceso de creación de misiones existen dos pasos 

      esenciales que deben realizarse:


      1) Creación de la sucursal

      2) Creación de la misión


      Cada paso se logra mediante el acceso a nuestra API REST teniendo en
      cuenta 

      todas las consideraciones que se indicarán seguidamente.


      La **sucursal** consiste en la ubicación geográfica donde será llevada a
      cabo la misión, en tal sentido se requiere suministrar las coordenadas de
      la misma 

      y el texto indicativo de dicha dirección.


      La misión a su vez se corresponde con el tipo más general de información
      que reune un conjunto de atributos 

      para describir la encuesta/formulario que desea ser efectuado. Nuestro
      modelo de misiones ha evolucionado para tipificarse 

      en unidades de información con propósitos más específicos. Estos sub-tipos
      son:


      - Verificaciones de domicilio.


      - Verificaciones laborales.


      - Verificaciones de propiedad.


      - Inspección de vehículos


      - Inspecciones médicas
  - name: Headquarter Resource
    description: >-
      Como indicamos anteriormente, el primer paso consiste en la creación de 

      la sucursal. Para ello debemos ejecutar un POST hacía el endpoint
      /api/headquarters. 

      Sin embargo, una sucursal debe pertenecer a una comuna y se requiere
      indicar el identificador

      de la comuna como parte de los datos de la creación de la sucursal.
  - name: Mission Resource
    description: >-
      El conjunto de datos que le da contexto a la misión, provienen de la
      campaña dentro de la cual será construida. 

      Es decir en la campaña se reunen todos los atributos base, reglas de
      ejecución, asignación del formulario de preguntas,

      entre otros. Por lo tanto cada misión pertenece a una campaña y cada
      cliente Rocketpin que desea crear misiones de forma automatizada

      deberá saber a que identificador de campaña pertenecerá la misión a crear.


      ### Mission Model


      - id (int): Id misión


      - title (string): Titulo de la campaña


      - public_name (string): Nombre publico de la campaña


      - amount (int): Dinero de recompensa


      - reward_points (int): Puntos de recompensa


      - level (object): Nivel requerido para poder tomar la misón


      - state (string): Estado actual de la misión  `<started, taken,
      collecting_stakeholders, waiting_authorization, completed, approved,
      disapproved, cancelled, unfinished>`


      - created_at (string): Fecha y hora de creación de la misión


      - updated_at (string): Fecha y hora de la última actualización de la
      misión


      - start_date_time (string): Fecha y hora de comenzo de la misión


      - end_date_time (string): Fecha y hora de termino de la misión


      - logo (string): Url de la foto de la misión


      - schedule (string): Fecha de agendamiento (en caso de ser una misión
      agendada)


      - headquarter (object): Sucuersal donde esta asociada a la misión


      - location_cords (object): Coordenadas de la ubicación de la misión


      - address (object): Dirección de la sucursal asociada a la misión


      - campain: (object): Datos basicos de la campaña asociada a la misión
  - name: Tipos de misiones
    description: >-
      Como indicamos al principio, la misión puede aplicarse a objetivos de
      negocio más específicos. Para tal fin actualmente se definen 5 subtipos cada uno con sus atributos propios que
      lo definen:


      1. Verificaciones de domicilio.


      2. Verificaciones laborales.


      3. Verificaciones de propiedad.


      4. Inspección de vehículos


      5. Inspecciones médicas


      Los sub-tipos poseen en común los siguientes atributos, por lo tanto cada
      uno de ellos debe contener valores para los mismos:


      - rut (string): Rut del solicitante


      - cellphone (string): Celular del solicitante


      - first_name (string): Nombre del solicitante


      - last_name (string): Apellido paterno del solicitante


      - second_last_name (string): Apellido materno del solicitante


      A su vez los parámetros por sub-tipo son:


      **Verificación de domicilio**


      - email (string): Email de la persona a verificar


      **Verificación laboral**


      - email (string): Email de la persona a verificar


      - work_position (string): Cargo laboral de la persona a verificar


      - work_section (string): Área laboral de la persona a verificar


      - company_rut (string): Rut de la compañía donde el verificado labora


      - company_business_name (string): Nombre de la compañia donde el
      verificado labora


      - company_business_line (string): Línea de negocios de la compañía donde
      el verificado labora


      **Verificación de propiedad**


      - other (string): Data descriptiva


      **Inspeción de vehículo**


      - brand_id (string): Código de identificador de marca del vehículo. (Este
      catálogo será suministrador por el integrador)


      - brand (string): Descripción de la marca del vehículo. (Este catálogo
      será suministrador por el integrador)


      - model_id (string): Código de identificador de modelo. (Este catálogo
      será suministrador por el integrador)


      - model (string): Descripción del modelo del vehículo. (Este catálogo será
      suministrador por el integrador)


      - name (string): Nombre completo del solicitante


      - licence_plate (string): Patente del vehículo


      - chassis_number (string): Número de chassis


      **Inspección médica**


      - company_rut (string): Rut de la compañía médica


      - company_business_name (string):  Nombre de la compañía médica


      - license_start_date (string): Fecha de licencia


      - license_type (string): Tipo de licencia


      - email (string): email de contacto

      A continuación crearemos una misión del subtipo particular "Inspección de Domicilio". La diferencia entre cada
      sub-tipo de misión radica en asignar dentro del objeto embebido *extension* los atributos que
      correspondan.

      El primer paso para la creación de la misión es haber consumido el servicio de creación de headquarter de la cual extraeremos
      el atributo id de dicha respuesta json y será usado como atributo headquarter_id y address_id en el json body del request para la creación de la misión

      Asumiendo que el identificador de campaña es el número 885 (campainId =
      885) indicaremos como se consume el servicio
  - name: Estados de misiones
    description: >-
      Una misión puede pasar por muchos estados diferentes.


      Si se desea, El sistema puede notificar cada vez que ocurre un cambio de
      estado mediante la implementación de un **Webhook**. Esta característica
      no es autoadministrable, por lo que es necesario que el cliente solicite
      esta habilitación.


      A continuación se detalla los estados posibles dentro del ciclo de vida de
      una misión.

      El siguiente diagrama describe los posibles flujos de estados:

      ![mision](https://fresh-3.s3.amazonaws.com/mission-flow.png)


      ##### Sin Asignar (initial)


      Tan pronto se ejecuta (crea) una misión, sus datos son poblados heredando
      la configuración de la campaña (hereda su nombre, precio, fecha de inicio
      y termino, país, etc.)

      En el estado inicial, la misión se encuentra a la espera de ser asignada a
      un agente.


      ##### Postulación (collecting_stakeholders):


      Cuando la campaña es configurada "Con Postulación", las misiones cambian
      automáticamente al estado collecting_stakeholders mientras son ejecutadas.
      Conceptualmente se inician en este estado.

      Cuando una misión se encuentra en postulación, tiene la característica de
      que varios agentes pueden postular a hacer la misión (no se asigna de
      inmediato), luego, es el equipo de Rocketpin quien elige a un agente en
      una lista de postulantes para realizar la misión.


      ##### Asignada (taken):


      Una ves la misión tiene asignado un agente, puede pasar al estado
      "Asignada". En este estado el agente tiene a disposición la misión para
      empezar a responder la encuesta lo antes posible. Es importante considerar
      que hay un tiempo permitido para que un agente pueda tener asignada una
      misión, que varia entre 1 y 48hrs dependiendo el tipo de misión. Si el
      agente decide no hacer la misión, puede liberarla desde la app, esto le
      traerá consecuencias negativas en su reputación (baja su cumplimiento). La
      misión liberada vuelve al estado "sin asignar" o "postulación" dependiendo
      el tipo de campaña.


      ##### Iniciada (started):


      Una vez el agente se encuentra en el lugar, puede iniciar la misión a
      traves de la app. En este punto el agente cuenta con un tiempo designado
      para completar la misión, de lo contrario la misión se cancelara (más
      adelante se explica el estado cancelado).


      ##### Completado (completed):


      Luego que el agente responda toda las preguntas (previa validación de la
      app), entonces se puede finalizar la misión, donde pasa a un exhaustivo
      proceso de revisión de la información por parte del equipo de Rocketpin.
      El siguiente paso es decidir si la misión se aprueba o se rechaza. Al
      rechazar la misión, el administrador de Rocketpin tiene la posibilidad de
      clonar la misión generando una nueva en el mismo punto.


      ##### Aprobado (approved):


      En este punto la misión (y toda su información) es considerada como valida
      por el equipo de Rocketpin y la información recaudada se usara para
      múltiples reportes orientados a las necesidades del cliente.


      ##### Rechazado (disapproved):


      Si la misión se rechaza, entonces no cumple con las exigencias de
      Rocketpin. Esto perjudica a la reputación del agente y es posible que el
      equipo de Rocketpin decida clonarla para volver a hacer la tarea y cumplir
      con las necesidades del cliente.


      ##### Cancelado (cancelled):


      Sucede cuando el agente demora más de lo estipulado para completar la
      misión. Esto afecta la reputación del agente y además vuelve a generar una
      nueva misión en estado "sin asignar" en el mismo punto geográfico, con el
      fin de que otro agente pueda completarla correctamente.
  - name: Address Resources
    description: |-
      La siguiente seccion esta relacionada con las direcciones y rocketpin.

      ### Address Model

      - id (int): Id de la sucursal

      - street (string): Direccion de la sucursal

      - city (string): Ciudad de la sucursal

      - long (float): longitud terrestre (coordenadas)

      - lat (float): latitud terrestre (coordenadas)

      - addressable_id (int): Id relacion polimorfica

      - addressable_type (string): Nombre clase relacion polimorfica

      - commune_id (int): Id de comuna

      - created_at (datetime): Fecha de creación

      - updated_at (datetime): Fecha de ultima modificación

      - sub_info (string): Información adicional de la ubicación

      - country_id (int): Id de País
  - name: Campain Resources
    description: >-
      La siguiente seccion esta relacionada con las campañas y rocketpin.


      ###Campain Model


      - id (int) : Id empresa


      - title (string) : Titulo de la campaña


      - public_name (string) : Nombre publico de la campaña


      - amount (int) : Dinero de recompensa


      - reward_points (int) : Puntos de recompensa


      - launch_type (string) : tipo de ejecución de la campaña `<immediately,
      scheduled_auto_mapping, scheduled_authorized, scheduled_manual,
      collecting_stakeholders>`


      - start_date_time (string) : Fecha de inicio de la campaña


      - end_date_time (string) : Fecha de termino de la misión


      - missions_qty (string) : Cantidad de misiones asociadas a la campaña


      - logo (url) : Logo asociado a la campaña


      - klass_name (int): clase de la campaña `<campain, custom_campain>`


      - has_required_level (boolean): Indica si el shopper tiene el nivel
      requerido para tomar la misión
  - name: Responses Resources
    description: >-
      La siguiente sección esta relacionada con las respuestas asociadas a una
      misión.


      ### Response Model


      - id (string): Id de la respuesta


      - component_type (string): Tipo de componente


      - index (int): Índice del componente


      - label (string): Título de la pregunta


      - value (string): Valor simple de la respuesta (para tipos: 'imageInput',
      'textInput', 'textArea')


      - value (object): Valor como objeto de la respuesta (para tipos: 'radio',
      'select', 'checkbox')


      - form_component (object): Componente asociado a la respuesta
  - name: Response - Value Resources
    description: >-
      La siguiente sección esta relacionada con el valor de una respuesta cuando
      es de tipo object.


      ### Value Model


      - text (string): Etiqueta de la respuesta


      - value (int): Valor de la respuesta
  - name: Builder Resources
    description: |-
      La siguiente sección esta relacionada con los Formularios y rocketpin.

      ### Builder Model

      - id (string): Id del formulario

      - public_name (string): Nombre público del formulario

      - internal_name (string): Nombre interno del formulario

      - description (string): Descripción del formulario

      - display (string): Tipo de formulario ('single' o 'wizard')

      - created_at (datetime): Fecha de creación del formulario

      - updated_at (datetime): Fecha de la última modificación del formulario

      - forms (array): Lista de páginas asociadas al formulario
  - name: Form Resources
    description: |-
      La siguiente sección esta relacionada con las páginas de los formularios.

      ### Form Model

      - id (string): Id de la página

      - title (string): Título de la página

      - description (string): Descripción de la página

      - index (int): Índice de página

      - form_components (array): Lista de componentes asociados a la página
  - name: FormComponent Resources
    description: >-
      La siguiente sección esta relacionada con los componentes asociados a una
      página.


      ### FormComponent Model


      - id (string): Id del componente


      - form_id (string): Id de la página asociada


      - component (string): Tipo de componente ('imageInput', 'textInput',
      'radio', 'select', 'checkbox', 'textArea', 'Image', 'Html')


      - label (string): Título del componente


      - description (string): Descripción del componente


      - placeholder (string): Valor de muestra del componente


      - internal_name (string): Nombre interno del componente


      - options (array): Lista de opciones que puede tener el componente (solo
      para tipos: 'select', 'radio', 'checkbox')


      - required (boolean): Indica si el componente es obligatorio


      - randomize (boolean): Indica si el valor es aleatorio


      - mime_type (boolean): Indica si el componente necesita tipo de archivo
      (solo para tipo: 'Image')


      - editable (boolean): Indica si el componente es editable


      - display (boolean): Indica si el componente se debe mostrar


      - validation (string): Tipo de validación del componente


      - weight (int): Peso del componente


      - dependent_from (object): Dependencia del componente


      - index (int): Índice del componente


      - custom_attributes (object): Atributos personalizados del componente
  - name: FormComponent - Options Resources
    description: >-
      La siguiente sección esta relacionada con las opciones de un componente de
      tipo lista.


      ### Options Model


      - text (string): Descripción de la opción


      - value (int): Valor de la opción


      - hidden (boolean): Indica si la opción no se muestra
  - name: Webhooks
    description: >-
      Nuestra plataforma permite notificarles los cambios de estado de una
      misión a través de un webhook. Es decir nos pueden inidicar una URL y los
      parámetros requeridos para enviarle los cambios de estado.

      Nuestro mecanismo es bastante flexible con la intención de enviar a su
      servicio de recepción un request de acuerdo a sus especifícaciones.


      Un ejemplo de notificación básico del cambio de estado de una misión se
      puede construir indicándonos los siguientes parámetros que requiera su
      servicio


      ```

      {
          "url" => "https://your.url.com",
          "http_method" => :put,
          "headers" => {
              "key-you-want" => "value-yo-want"
          },
          "query_strings" => {
              "mission_id" => "{id}",
              "mission_state" => "{state}"
          }
      }

      ```


      En este caso "url", "http_method", "headers" podría ser indicado por el
      cliente. El "query_strings" puede ser acordado entre Rocketpin y el
      cliente. Allí en el ejemplo se sugiere "mission_id" que es nuestro
      identificador interno de misión y el nuevo estado "mission_state".


      Otro ejemplo de notificación para un servicio más especializado sería un
      Webhook para notificar a un landbot Whatsapp en donde se requieren datos
      más personalizados:


      ```
      {
          "url" => "https://your.url.com",
          "http_method" => :post,
          "headers" => {
              "your-header-key" => "your-header-value"
          },
          "query_strings" => {
              "mission_id" => "{id}",
              "mission_state" => "{state}",
              "surveyed_full_name" => "{extension.name}",
              "surveyed_cellphone" => "{extension.cellphone}",
              "country_code" => "CL",
              "client_name" => "Rocketpin",
              "landbot_template_id" => 357,
              "landbot_bot_id" => 433229
          }
      }
      ```